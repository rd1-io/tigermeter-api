name: Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout tigermeter-api
        uses: actions/checkout@v4
        with:
          repository: rd1-io/tigermeter-api
          token: ${{ secrets.GH_PAT || github.token }}
          path: code

      - name: Upload repo to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "code/*"
          target: "/opt/tigermeter/tigermeter-api"
          rm: true
          strip_components: 1

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script_stop: true
          script: |
            set -euo pipefail

            # 1) Install Docker & docker compose plugin if missing
            if ! command -v docker >/dev/null 2>&1; then
              rm -f /etc/apt/sources.list.d/docker.list || true
              apt-get update
              apt-get install -y ca-certificates curl gnupg lsb-release
              install -m 0755 -d /etc/apt/keyrings
              . /etc/os-release
              DISTRO=${ID}
              CODENAME=${VERSION_CODENAME:-${UBUNTU_CODENAME:-$(lsb_release -cs 2>/dev/null || echo noble)}}
              # Fallbacks in case of unexpected IDs
              if [ "$DISTRO" != "ubuntu" ] && [ "$DISTRO" != "debian" ]; then DISTRO=ubuntu; fi
              curl -fsSL https://download.docker.com/linux/${DISTRO}/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              chmod a+r /etc/apt/keyrings/docker.gpg
              ARCH=$(dpkg --print-architecture)
              rm -f /etc/apt/sources.list.d/docker.list
              printf 'deb [arch=%s signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/%s %s stable\n' "$ARCH" "$DISTRO" "$CODENAME" | tee /etc/apt/sources.list.d/docker.list >/dev/null
              apt-get update || { echo "APT update failed. docker.list:"; nl -ba /etc/apt/sources.list.d/docker.list; echo "os-release:"; cat /etc/os-release; exit 97; }
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin git
              systemctl enable --now docker
            fi

            # 1b) If Docker is from snap, replace it with the official apt packages
            DOCKER_BIN="$(command -v docker || true)"
            if [ -n "$DOCKER_BIN" ] && echo "$DOCKER_BIN" | grep -q "/snap/"; then
              echo "Detected snap Docker at $DOCKER_BIN; replacing with apt-managed Docker."
              if command -v snap >/dev/null 2>&1; then
                snap remove --purge docker || true
              fi
              rm -f /etc/apt/sources.list.d/docker.list || true
              apt-get update
              apt-get remove -y docker docker.io docker-doc docker-compose podman-docker containerd runc || true
              apt-get install -y ca-certificates curl gnupg lsb-release
              install -m 0755 -d /etc/apt/keyrings || true
              . /etc/os-release
              DISTRO=${ID}
              CODENAME=${VERSION_CODENAME:-${UBUNTU_CODENAME:-$(lsb_release -cs 2>/dev/null || echo noble)}}
              if [ "$DISTRO" != "ubuntu" ] && [ "$DISTRO" != "debian" ]; then DISTRO=ubuntu; fi
              curl -fsSL https://download.docker.com/linux/${DISTRO}/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              chmod a+r /etc/apt/keyrings/docker.gpg
              ARCH=$(dpkg --print-architecture)
              rm -f /etc/apt/sources.list.d/docker.list
              printf 'deb [arch=%s signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/%s %s stable\n' "$ARCH" "$DISTRO" "$CODENAME" | tee /etc/apt/sources.list.d/docker.list >/dev/null
              apt-get update || { echo "APT update failed. docker.list:"; nl -ba /etc/apt/sources.list.d/docker.list; echo "os-release:"; cat /etc/os-release; exit 97; }
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              systemctl enable --now docker
            fi

            # 2) Use uploaded repo
            mkdir -p /opt/tigermeter/tigermeter-api
            cd /opt/tigermeter/tigermeter-api

            # 3) Write .env for compose (use printf to avoid YAML/heredoc parsing issues)
            printf "JWT_SECRET=%s\nHMAC_KEY=%s\n" "${{ secrets.JWT_SECRET }}" "${{ secrets.HMAC_KEY }}" > .env

            # 4) Ensure DNS is set: api.tigermeter.rd1.io and emulator.tigermeter.rd1.io -> ${HOSTNAME}
            # 5) Start stack (Caddy will get TLS via Let's Encrypt automatically once DNS resolves)
            echo "Working dir:" && pwd
            echo "Docker versions:" && docker --version && (docker compose version || docker-compose --version || true)
            echo "Docker binary path:" && which docker && readlink -f "$(command -v docker)" || true
            echo "Docker (apt) path check:" && ls -la /usr/bin/docker || true
            echo "Compose plugin locations:" && ls -la /usr/libexec/docker/cli-plugins 2>/dev/null || true
            echo "Root listing:" && ls -la
            echo "Search compose in top 2 levels:" && find . -maxdepth 2 -type f -name "docker-compose.yml" -print || true
            test -f docker-compose.yml || { echo "ERROR: docker-compose.yml not found in $(pwd)"; exit 90; }
            stat docker-compose.yml || true
            PROJECT_DIR="/opt/tigermeter/tigermeter-api"
            COMPOSE_FILE="$PROJECT_DIR/docker-compose.yml"
            COMPOSE_CMD="/usr/bin/docker compose"
            echo "Using compose file: $COMPOSE_FILE"
            ls -la "$COMPOSE_FILE" || { echo "ERROR: compose file missing"; exit 91; }
            $COMPOSE_CMD -f "$COMPOSE_FILE" config >/dev/null
            $COMPOSE_CMD -f "$COMPOSE_FILE" pull || true
            $COMPOSE_CMD -f "$COMPOSE_FILE" build --no-cache
            $COMPOSE_CMD -f "$COMPOSE_FILE" up -d --remove-orphans

            # 6) Prune old images
            docker image prune -af || true







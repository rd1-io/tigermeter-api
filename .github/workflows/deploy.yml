name: Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment: prod
    steps:
      - name: Checkout tigermeter-api
        uses: actions/checkout@v4
        with:
          repository: rd1-io/tigermeter-api
          token: ${{ secrets.GH_PAT || github.token }}
          path: code

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push API image
        uses: docker/build-push-action@v5
        with:
          context: code/node-api
          file: code/node-api/Dockerfile
          push: true
          tags: |
            ghcr.io/rd1-io/tigermeter-api:${{ github.sha }}
            ghcr.io/rd1-io/tigermeter-api:latest

      - name: Build & push Emulator image
        uses: docker/build-push-action@v5
        with:
          context: code/web-emulator
          file: code/web-emulator/Dockerfile
          push: true
          build-args: |
            VITE_API_BASE_URL=https://api.tigermeter.rd1.io/api
            VITE_HMAC_KEY=${{ secrets.HMAC_KEY }}
          tags: |
            ghcr.io/rd1-io/tigermeter-emulator:${{ github.sha }}
            ghcr.io/rd1-io/tigermeter-emulator:latest

      - name: Upload repo to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "code/*"
          target: "/opt/tigermeter/tigermeter-api"
          rm: true
          strip_components: 1

      - name: Remote diagnostics (pre-deploy)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script_stop: false
          request_pty: true
          command_timeout: 2m
          script: |
            echo "=== remote diagnostics ==="
            set || true
            uname -a || true
            id || true
            echo "shell: ${SHELL:-unknown}" || true
            which bash || true
            which docker || true
            docker --version || true
            (docker compose version || docker-compose --version) || true
            cd /opt/tigermeter/tigermeter-api 2>/dev/null || true
            pwd || true
            ls -la || true
            stat docker-compose.yml || true

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script_stop: true
          request_pty: true
          script: |
            set -eu
            set -o pipefail 2>/dev/null || true
            set -x
            GHCR_TOK="${{ secrets.GHCR_TOKEN || secrets.GH_PAT || '' }}"
            GHCR_USR="${{ secrets.GHCR_USER || github.actor }}"

            # 1) Install Docker & docker compose plugin if missing
            if ! command -v docker >/dev/null 2>&1; then
              rm -f /etc/apt/sources.list.d/docker.list || true
              apt-get update
              apt-get install -y ca-certificates curl gnupg lsb-release
              install -m 0755 -d /etc/apt/keyrings
              . /etc/os-release
              DISTRO=${ID}
              CODENAME=${VERSION_CODENAME:-${UBUNTU_CODENAME:-$(lsb_release -cs 2>/dev/null || echo noble)}}
              # Fallbacks in case of unexpected IDs
              if [ "$DISTRO" != "ubuntu" ] && [ "$DISTRO" != "debian" ]; then DISTRO=ubuntu; fi
              curl -fsSL https://download.docker.com/linux/${DISTRO}/gpg | gpg --dearmor --batch --yes -o /etc/apt/keyrings/docker.gpg
              chmod a+r /etc/apt/keyrings/docker.gpg
              ARCH=$(dpkg --print-architecture)
              rm -f /etc/apt/sources.list.d/docker.list
              printf 'deb [arch=%s signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/%s %s stable\n' "$ARCH" "$DISTRO" "$CODENAME" | tee /etc/apt/sources.list.d/docker.list >/dev/null
              apt-get update || { echo "APT update failed. docker.list:"; nl -ba /etc/apt/sources.list.d/docker.list; echo "os-release:"; cat /etc/os-release; exit 97; }
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin git
              systemctl enable --now docker
            fi

            # 1b) If Docker is from snap, replace it with the official apt packages
            DOCKER_BIN="$(command -v docker || true)"
            if [ -n "$DOCKER_BIN" ] && echo "$DOCKER_BIN" | grep -q "/snap/"; then
              echo "Detected snap Docker at $DOCKER_BIN; replacing with apt-managed Docker."
              if command -v snap >/dev/null 2>&1; then
                snap remove --purge docker || true
              fi
              rm -f /etc/apt/sources.list.d/docker.list || true
              apt-get update
              apt-get remove -y docker docker.io docker-doc docker-compose podman-docker containerd runc || true
              apt-get install -y ca-certificates curl gnupg lsb-release
              install -m 0755 -d /etc/apt/keyrings || true
              . /etc/os-release
              DISTRO=${ID}
              CODENAME=${VERSION_CODENAME:-${UBUNTU_CODENAME:-$(lsb_release -cs 2>/dev/null || echo noble)}}
              if [ "$DISTRO" != "ubuntu" ] && [ "$DISTRO" != "debian" ]; then DISTRO=ubuntu; fi
              curl -fsSL https://download.docker.com/linux/${DISTRO}/gpg | gpg --dearmor --batch --yes -o /etc/apt/keyrings/docker.gpg
              chmod a+r /etc/apt/keyrings/docker.gpg
              ARCH=$(dpkg --print-architecture)
              rm -f /etc/apt/sources.list.d/docker.list
              printf 'deb [arch=%s signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/%s %s stable\n' "$ARCH" "$DISTRO" "$CODENAME" | tee /etc/apt/sources.list.d/docker.list >/dev/null
              apt-get update || { echo "APT update failed. docker.list:"; nl -ba /etc/apt/sources.list.d/docker.list; echo "os-release:"; cat /etc/os-release; exit 97; }
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              systemctl enable --now docker
            fi

            # 2) GHCR login (optional if images are public)
            DO_GHCR_LOGIN=0
            { [ -n "$GHCR_TOK" ] && [ -n "$GHCR_USR" ]; } && DO_GHCR_LOGIN=1 || true
            if [ "$DO_GHCR_LOGIN" -eq 1 ]; then
              echo "Logging into GHCR as $GHCR_USR"
              echo "$GHCR_TOK" | docker login ghcr.io -u "$GHCR_USR" --password-stdin || true
            else
              echo "Skipping GHCR login; pulling public images"
            fi

            # 3) Use uploaded repo
            mkdir -p /opt/tigermeter/tigermeter-api
            cd /opt/tigermeter/tigermeter-api

            # 4) Write .env for compose (use printf to avoid YAML/heredoc parsing issues)
            printf "JWT_SECRET=%s\nHMAC_KEY=%s\nAPI_IMAGE=%s\nEMULATOR_IMAGE=%s\n" \
              "${{ secrets.JWT_SECRET }}" \
              "${{ secrets.HMAC_KEY }}" \
              "ghcr.io/rd1-io/tigermeter-api:${{ github.sha }}" \
              "ghcr.io/rd1-io/tigermeter-emulator:${{ github.sha }}" > .env

            # 4) Ensure DNS is set: api.tigermeter.rd1.io and emulator.tigermeter.rd1.io -> ${HOSTNAME}
            # 5) Start stack (Caddy will get TLS via Let's Encrypt automatically once DNS resolves)
            echo "Working dir:" && pwd
            echo "Docker versions:" && docker --version && (docker compose version || docker-compose --version || true)
            echo "Docker binary path:" && which docker && readlink -f "$(command -v docker)" || true
            echo "Docker (apt) path check:" && ls -la /usr/bin/docker || true
            echo "Compose plugin locations:" && ls -la /usr/libexec/docker/cli-plugins 2>/dev/null || true
            echo "Root listing:" && ls -la
            echo "Search compose in top 2 levels:" && find . -maxdepth 2 -type f -name "docker-compose.yml" -print || true
            test -f docker-compose.yml || { echo "ERROR: docker-compose.yml not found in $(pwd)"; exit 90; }
            stat docker-compose.yml || true
            PROJECT_DIR="/opt/tigermeter/tigermeter-api"
            COMPOSE_FILE="$PROJECT_DIR/docker-compose.yml"
            COMPOSE_CMD="/usr/bin/docker compose"
            echo "Using compose file: $COMPOSE_FILE"
            ls -la "$COMPOSE_FILE" || { echo "ERROR: compose file missing"; exit 91; }
            $COMPOSE_CMD -f "$COMPOSE_FILE" config >/dev/null
            $COMPOSE_CMD -f "$COMPOSE_FILE" pull || true
            $COMPOSE_CMD -f "$COMPOSE_FILE" up -d --remove-orphans

        env:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN || secrets.GH_PAT || '' }}
          GHCR_USER: ${{ secrets.GHCR_USER || github.actor }}






